Event Pattern Grammar				
	Base specification			
		<event pattern> 	::=	[<user spec>] [<pc spec>] <op spec> [<pe spec>]
	User specification			
		<user spec> 		::=	<user> | <any user> | <process>
		<user> 			::=	[user] user_name
		<any user> 		::=	any [user] [of <user or attr set>]
		<user or attr set> 	::=	<user or attr> {, <user or attr>}
		<user or attr> 		::=	<user> | <uattr>
		<uattr> 		::=	attribute attribute_name
		<process> 		::=	process process_id
	Policy class specification			
		<pc spec> 		::=	in <pc subspec>
		<pc subspec> 		::=	<pc> | <any pc> | <each pc>
		<pc> 			::=	[policy] pc_name
		<any pc> 		::=	any [policy] [of <pc set>]
		<each pc> 		::=	each [policy] [of <pc set>]
		<pc set> 		::=	<pc> {, <pc>}
	Operation specification			
		<op spec> 		::=	performs <op subspec>
		<op subspec> 		::=	<op> | <any op>
		<op> 			::=	[operation] op_name
		<any op> 		::=	any [operation] [of <op set>]
		<op set> 		::=	<op> {, <op>}
	Policy element specification			
		<pe spec> 		::=	on <pe subspec> [<membership subspec>]
		<pe subspec> 		::=	<pe> | <any pe>
		<pe> 			::=	[policy element] pe_name
		<any pe> 		::=	any [policy element]
		<membership subspec> 	::=	in <pe> | of <pe set>
		<pe set> 		::=	<pe> {, <pe>}
				
Event Response Grammar				
	Base specification			
		<response> 		::=	<conditional action> {, <conditional action>}
		<conditional action> 	::=	[if <condition> then] <action> {, <action>}
		<condition> 		::=	<factor> {and <factor>}
		<factor> 		::=	[not] <cond entity> <rest factor> | [not] evidence of <action>
		<rest factor> 		::=	exists | in <cond entity>
		<cond entity> 		::=	user [attribute] <name or function call> |
						object [attribute] <name or function call> |
						policy <name or function call>
		<name or function call> ::=	name | fn_name ( [<arg part>] )
		<arg part> 		::=	<name or function call> {, <name or function call>}
		<action> 		::=	<create action> |
						<assign action> |
						<grant action> |
						<deny action> |
						<delete action>
						Create action specification			
		<create action> 	::=	create <create what> <create where>
		<create what> 		::=	<user or obj prefix> [attribute] <name or function call> |
						policy <name or function call>
		<user or obj prefix> 	::=	user | object
		<create where> 		::=	in <container>
		<container> 		::=	<base container> | <policy container> | <attr container>
		<base container> 	::=	base
		<policy container> 	::=	policy <name or function call>
		<attr container> 	::=	<attr prefix> <name or function call>
		<attr prefix> 		::=	user attribute | object attribute
	Assign action specification			
		<assign action> 	::=	assign <assign what> [<assign to>]
		<assign what> 		::=	<user or obj prefix> [attribute] <name or function call>
		<assign to> 		::=	to <container set> | like <model entity>
		<container set> 	::=	<container> {, <container>}
		<model entity> 		::=	<user or obj prefix> [attribute] <name or function call>
	Grant action specification			
		<grant action> 		::=	grant <grant to> <grant what> [<grant on>]
		<grant to> 		::=	<uattr spec> {, <uattr spec>}
		<uattr spec> 		::=	[[user] attribute] <name or function call>
		<grant what> 		::=	<ar prefix> <granted ar set>
		<ar prefix> 		::=	access right | access rights
		<granted ar set> 	::=	ar_name {, ar_name}
		<grant on> 		::=	on <attr container>
	Deny action specification			
		<deny action> 		::=	deny <deny to> <deny what> <deny on>
		<deny to> 		::=	user [attribute] <name or function call> |
						process <name or function call>
		<deny what> 		::=	<ar prefix> <denied ar set>
		<ar prefix> 		::=	access right | access rights
		<denied ar set> 	::=	ar_name {, ar_name}
		<deny on> 		::=	[on [complement of] elements of [intersection of]] <attribute set>
		<attribute set> 	::=	<member attr> {, <member attr>}
		<member attr> 		::=	[complement of] <attr container>
	Delete action specification			
		<delete action> 	::=	delete <delete subaction>
		<delete subaction> 	::=	<delete assign subaction> |
						<delete deny subaction> |
						<delete grant subaction> |
						<delete create subaction>
		<delete assign subaction> 	::=	assign <assign what> to <container set>
		<delete deny subaction> 	::=	deny <deny to> <deny what> <deny on>
		<delete grant subaction>	::=	grant <grant to> <grant what> <grant on>
		<delete create subaction> 	::=	create <create what>
